
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  phoneNumber: 'phoneNumber',
  avatar: 'avatar',
  isActive: 'isActive',
  isBanned: 'isBanned',
  bannedUntil: 'bannedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacilityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  amenities: 'amenities',
  photos: 'photos',
  ownerId: 'ownerId',
  status: 'status',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtScalarFieldEnum = {
  id: 'id',
  name: 'name',
  facilityId: 'facilityId',
  sportType: 'sportType',
  pricePerHour: 'pricePerHour',
  operatingStartHour: 'operatingStartHour',
  operatingEndHour: 'operatingEndHour',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeSlotScalarFieldEnum = {
  id: 'id',
  courtId: 'courtId',
  startTime: 'startTime',
  endTime: 'endTime',
  isMaintenanceBlocked: 'isMaintenanceBlocked',
  maintenanceReason: 'maintenanceReason',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  timeSlotId: 'timeSlotId',
  courtId: 'courtId',
  playerId: 'playerId',
  totalPrice: 'totalPrice',
  status: 'status',
  paymentSimulated: 'paymentSimulated',
  bookingNotes: 'bookingNotes',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  title: 'title',
  description: 'description',
  maxPlayers: 'maxPlayers',
  sportType: 'sportType',
  skillLevel: 'skillLevel',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchPlayerScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  joinedAt: 'joinedAt',
  result: 'result'
};

exports.Prisma.PlayerRatingScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  sportType: 'sportType',
  rating: 'rating',
  gamesPlayed: 'gamesPlayed',
  wins: 'wins',
  losses: 'losses',
  draws: 'draws',
  lastMatchAt: 'lastMatchAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingHistoryScalarFieldEnum = {
  id: 'id',
  ratingId: 'ratingId',
  oldRating: 'oldRating',
  newRating: 'newRating',
  ratingChange: 'ratingChange',
  opponentRating: 'opponentRating',
  matchResult: 'matchResult',
  createdAt: 'createdAt'
};

exports.Prisma.WaitlistEntryScalarFieldEnum = {
  id: 'id',
  timeSlotId: 'timeSlotId',
  playerId: 'playerId',
  priority: 'priority',
  status: 'status',
  notifiedAt: 'notifiedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OccupancyStatsScalarFieldEnum = {
  id: 'id',
  courtId: 'courtId',
  hourOfWeek: 'hourOfWeek',
  avgOccupancy: 'avgOccupancy',
  sampleCount: 'sampleCount',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  type: 'type',
  title: 'title',
  message: 'message',
  sentAt: 'sentAt',
  readAt: 'readAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  FACILITY_OWNER: 'FACILITY_OWNER',
  ADMIN: 'ADMIN'
};

exports.FacilityStatus = exports.$Enums.FacilityStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.SportType = exports.$Enums.SportType = {
  BADMINTON: 'BADMINTON',
  TENNIS: 'TENNIS',
  SQUASH: 'SQUASH',
  BASKETBALL: 'BASKETBALL',
  FOOTBALL: 'FOOTBALL',
  CRICKET: 'CRICKET',
  TABLE_TENNIS: 'TABLE_TENNIS',
  VOLLEYBALL: 'VOLLEYBALL'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.MatchStatus = exports.$Enums.MatchStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.WaitlistStatus = exports.$Enums.WaitlistStatus = {
  WAITING: 'WAITING',
  PROMOTED: 'PROMOTED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  PlayerProfile: 'PlayerProfile',
  Facility: 'Facility',
  Court: 'Court',
  TimeSlot: 'TimeSlot',
  Booking: 'Booking',
  Match: 'Match',
  MatchPlayer: 'MatchPlayer',
  PlayerRating: 'PlayerRating',
  RatingHistory: 'RatingHistory',
  WaitlistEntry: 'WaitlistEntry',
  OccupancyStats: 'OccupancyStats',
  NotificationLog: 'NotificationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
